# 모든 원소의 값이 0보다 크거나 같다고 가정
array = [7, 5, 9, 0, 3, 1, 6, 2, 9, 1, 4, 8, 0, 5, 2]

# 모든 범위를 포함하는 리스트 선언
count = [0] * (max(array) + 1)

for i in range(len(array)):
    count[array[i]] += 1

for i in range(len(count)):
    for _ in range(count[i]):
        print(i, end=' ')

# 모든 데이터가 양의 정수인 상황
# 데이터 개수: N, 데이터의 최대값: K
# 시간복잡도: O(N + K)
# 공간복잡도: O(N + K)

# 데이터가 0과 999,999 단 2개만 존재해도 100만개의 크기가 필요하다.
# 크기가 한정되어 있고, 동일한 값을 가지는 데이터가 많을 때 적합하여 항상 사용할 수는 없다.
# ex) 100점 받은 학생 구하기

# 조건만 만족한다면 정렬할 데이터가 많을 때에도 계수 정렬을 효과적으로 사용할 수 있다.
# 일반적인 코딩테스트 환경에서는 메모리 공간상의 제약과 입출력 시간 문제로 인하여
# 입력되는 데이터의 개수가 1,000만개 이상으로 설정할 수 없는 경우가 많기 때문에
# 정렬 문제에서 데이터 개수는 1,000만개 미만으로 출제될 것이다.

# 단순히 정렬을 하는 경우에는 내장 정렬 라이브러리를 사용하고,
# 데이터의 범위가 한정되어 있으며 더 빠르게 동작해야 할 때는 계수 정렬을 사용하자.
